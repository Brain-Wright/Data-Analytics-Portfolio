#Title - Exploratory Data Analysis of Retail Sales
#Objective - This project analyzes retail sales data to identify sales trends, customer behavior, and profitability across various regions and product categories. Using Python (Pandas, Matplotlib, Seaborn, NumPy, and SciPy), the analysis provides actionable insights to optimize sales strategies and improve profit margins.  


import pandas as pd

# Create DataFrame
data = {
    "Order_ID": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115],
    "Date": ["2023-07-10", "2023-07-12", "2023-07-15", "2023-07-18", "2023-07-22",
             "2023-07-25", "2023-07-28", "2023-08-01", "2023-08-05", "2023-08-08",
             "2023-08-12", "2023-08-16", "2023-08-20", "2023-08-24", "2023-08-28"],
    "Customer_ID": [5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010,
                     5011, 5012, 5013, 5014, 5015],
    "Region": ["East", "West", "North", "South", "East", "West", "North", "South",
               "East", "West", "North", "South", "East", "West", "North"],
    "Product": ["Laptop", "Shirt", "Sofa", "Phone", "Tablet", "Jacket", "Bed", "Headphones",
                "T-shirt", "Desk", "Monitor", "Sneakers", "Mouse", "Chair", "Printer"],
    "Category": ["Electronics", "Clothing", "Furniture", "Electronics", "Electronics",
                 "Clothing", "Furniture", "Electronics", "Clothing", "Furniture",
                 "Electronics", "Clothing", "Electronics", "Furniture", "Electronics"],
    "Sales": [1200, 50, 500, 900, 750, 200, 1200, 300, 40, 850, 400, 120, 50, 600, 200],
    "Quantity": [1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],
    "Discount": [10, 5, 20, 15, 12, 8, 25, 10, 5, 18, 10, 7, 5, 15, 8],
    "Profit": [200, 15, 100, 150, 180, 50, 250, 60, 10, 200, 90, 25, 12, 130, 40]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Convert Date column to datetime format
df["Date"] = pd.to_datetime(df["Date"])

# Display first few rows
df.head()

  Order_ID	     Date	     Customer_ID	   Region	  Product	    Category	  Sales	Quantity	Discount	Profit
0	101	       2023-07-10	     5001	          East	   Laptop	   Electronics	 1200	   1	       10	      200
1	102	       2023-07-12    	 5002	          West	   Shirt	   Clothing	       50	   2	        5	       15
2	103	       2023-07-15	     5003	         North	   Sofa	     Furniture	    500	   1	       20	      100
3	104	       2023-07-18	     5004	         South	   Phone	   Electronics	  900	   1	       15	      150
4	105	       2023-07-22	     5005	          East	   Tablet	   Electronics	  750	   1	       12	      180


# Begin the data-cleaning process
# Check for missing values
print("Missing Values:\n", df.isnull().sum())

	
Missing Values:
 order_id       0
date           0
customer_id    0
region         0
product        0
category       0
sales          0
quantity       0
discount       0
profit         0
dtype: int64

# Remove duplicates
df = df.drop_duplicates()

# Standardize column names
df.columns = df.columns.str.strip().str.lower()

# Verify data types
print("\nData Types:\n", df.dtypes)


Data Types:
 order_id                int64
date           datetime64[ns]
customer_id             int64
region                 object
product                object
category               object
sales                   int64
quantity                int64
discount                int64
profit                  int64
dtype: object

# Summary statistics
print("\nSummary Statistics:\n", df.describe())

Summary Statistics:
          order_id                 date  customer_id        sales   quantity  \
count   15.000000                   15    15.000000    15.000000  15.000000   
mean   108.000000  2023-08-01 19:12:00  5008.000000   490.666667   1.133333   
min    101.000000  2023-07-10 00:00:00  5001.000000    40.000000   1.000000   
25%    104.500000  2023-07-20 00:00:00  5004.500000   160.000000   1.000000   
50%    108.000000  2023-08-01 00:00:00  5008.000000   400.000000   1.000000   
75%    111.500000  2023-08-14 00:00:00  5011.500000   800.000000   1.000000   
max    115.000000  2023-08-28 00:00:00  5015.000000  1200.000000   2.000000   
std      4.472136                  NaN     4.472136   407.491747   0.351866   

        discount     profit  
count  15.000000   15.00000  
mean   11.533333  100.80000  
min     5.000000   10.00000  
25%     7.500000   32.50000  
50%    10.000000   90.00000  
75%    15.000000  165.00000  
max    25.000000  250.00000  
std     5.974549   79.63506 

# Visualizing Sales Trends
import matplotlib.pyplot as plt
import seaborn as sns

# Sales over time
plt.figure(figsize=(12,6))
sns.lineplot(data=df, x="date", y="sales", marker="o", linewidth=2)
plt.title("Sales Trend Over Time", fontsize=14)
plt.xlabel("Date")
plt.ylabel("Sales ($)")
plt.xticks(rotation=45)
plt.grid()
plt.show()


#Top-Selling Categories
plt.figure(figsize=(8,5))
sns.barplot(data=df, x="category", y="sales", ci=None, palette="coolwarm")
plt.title("Total Sales by Category", fontsize=14)
plt.xlabel("Product Category")
plt.ylabel("Total Sales ($)")
plt.grid(axis="y")
plt.show()


# Most Profitable Product
# Group by product and sum profits
profit_per_product = df.groupby("product")["profit"].sum().reset_index()

# Sort and display top 5 profitable products
print(profit_per_product.sort_values(by="profit", ascending=False).head())

 product  profit
0      Bed     250
2     Desk     200
5   Laptop     200
14  Tablet     180
8    Phone     150

# Discount Impact on Sales
plt.figure(figsize=(8,5))
sns.scatterplot(data=df, x="discount", y="sales", hue="category", size="profit", palette="coolwarm")
plt.title("Impact of Discounts on Sales", fontsize=14)
plt.xlabel("Discount (%)")
plt.ylabel("Sales ($)")
plt.show()

# Relationship between sales volume and profitability
import matplotlib.pyplot as plt

# Total Sales and Profit
df['Profit_Margin'] = (df['Profit'] / df['Sales']) * 100  # Optional: Calculate profit margin
total_sales = df['Sales'].sum()
total_profit = df['Profit'].sum()


# Scatter Plot for Sales vs Profit
plt.figure(figsize=(8, 6))
plt.scatter(df['Sales'], df['Profit'], alpha=0.5, c='blue')
plt.title('Relationship Between Sales Volume and Profitability')
plt.xlabel('Sales Volume')
plt.ylabel('Profit')
plt.grid(True)


# outliers in sales, discount, or profit values
# Boxplot to visualize outliers
import seaborn as sns

plt.figure(figsize=(12, 6))
sns.boxplot(data=df[['Sales', 'Discount', 'Profit']])
plt.title('Outliers in Sales, Discount, and Profit')
plt.show()

# Optional: Identify specific outliers using IQR
columns = ['Sales', 'Discount', 'Profit']
for col in columns:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
    print(f"Outliers for {col}:\n", outliers)
plt.show()


# Do specific product categories have consistently high or low-profit margins?
# Calculate Average Profit Margin by Product Category
df['Profit_Margin'] = (df['Profit'] / df['Sales']) * 100
category_profit_margin = df.groupby('Category')['Profit_Margin'].mean().sort_values(ascending=False)

print("Average Profit Margin by Product Category:")
print(category_profit_margin)

Average Profit Margin by Product Category:
Category
Clothing       25.208333
Furniture      21.507353
Electronics    20.547619
Name: Profit_Margin, dtype: float64

# distribution of sales across different regions
# Total Sales by Region
region_sales = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)

print("Sales Distribution by Region:")
print(region_sales)


# Bar Plot for Sales by Region
region_sales.plot(kind='bar', figsize=(8, 6), color='skyblue')
plt.title('Sales Distribution Across Regions')
plt.xlabel('Region')
plt.ylabel('Total Sales')
plt.xticks(rotation=45)
plt.show()


Sales Distribution by Region:
Region
North    2300
East     2040
West     1700
South    1320
Name: Sales, dtype: int64

# Which regions contribute the highest sales volume
# Regions with Highest Sales
highest_sales_region = df.groupby('Region')['Sales'].sum().sort_values(ascending=False)

print("Regions Contributing the Highest Sales Volume:")
print(highest_sales_region.head())  # Top regions by sales

Regions Contributing the Highest Sales Volume:
Region
North    2300
East     2040
West     1700
South    1320
Name: Sales, dtype: int64
